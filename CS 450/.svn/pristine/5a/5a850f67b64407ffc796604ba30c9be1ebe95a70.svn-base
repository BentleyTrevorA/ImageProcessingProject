import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

public class HW3
{
    int width, height;
    BufferedImage inputImg, outputImg;
    File file;
    WritableRaster in, out;

    /* The image in file stuff.pgmView in a new window contains some assorted paraphernalia.
     * The image in stufmin1.pgmView in a new window has one less object.
     * Write a program to locate the missing object and return the (x,y) coordinates of its center of gravity.
     * You will want to use a combination of arithmetic operations, level operations, and your own creativity.
     */

    public void doAveraging() throws Exception{
        String prompt = CS450.prompt("How many images to average?", new String[] { "2", "5", "10", "20", "40"});

        if(prompt == null)
            return;

        int howMany = Integer.parseInt(prompt);

        setupImages("img\\Frames\\Cat0.pgm");

        float sums[][] = new float[width][height];

        for (int i=0; i<howMany; i++)
        {
            file = new File("img\\Frames\\Cat" + i + ".pgm");
            inputImg = ImageIO.read(file);

            if (inputImg == null) {
                throw new Exception("unable to read image");
            }

            in = inputImg.getRaster();

            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    sums[x][y] += in.getSample(x, y, 0);
                }
            }
        }

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                float value = sums[x][y] / howMany;
                out.setSample(x, y, 0, value);
                out.setSample(x, y, 1, value);
                out.setSample(x, y, 2, value);
            }
        }

        CS450.setImageA(outputImg);
    }

    public void doUniformAveraging() throws IOException {
        String value = CS450.prompt("Size of Kernel", new String[] { "3", "5", "7", "9"});

        if(value == null)
            return;

        int kernelSize = Integer.parseInt(value);

        float[][] kernel = new float[kernelSize][kernelSize];

        // PICTURE
        setupImages("img\\NoisyGull.pgm");



        CS450.setImageA(inputImg);
        CS450.setImageB(outputImg);
    }

    public void doMedianFilter() throws IOException{
        String value = CS450.prompt("Size of Kernel", new String[] { "3", "5", "7"});

        if(value == null)
            return;

        int size = Integer.parseInt(value);
    }

    private void setupImages(String imgPath) throws IOException{
        file = new File(imgPath);
        inputImg = ImageIO.read(file);
        in = inputImg.getRaster();

        width = inputImg.getWidth();
        height = inputImg.getHeight();

        outputImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        out = outputImg.getRaster();
    }
}
